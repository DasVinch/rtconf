#!/bin/bash

#
# GENERIC CONFIGURATION SCRIPT - EDIT TO MATCH YOUR SYSTEM
#
# Notes :
# - This script is a system-wide configuration, not a configuration for a single AO loop
# -



# ====================================================================================
# ======================= USER SHOULD FILL THIS SECTION ==============================
# ====================================================================================

# WARNING
# THIS IS FOR scexao6 - there are a couple of AMD specifics as compared to other computers
# Also, for this to behave well we need to first create a cset shield
# (and not create the system set, that'll come automatically with the shield)

# NUMA REMINDER
#   Numa 0 - cores 0-15
#     Sees A6000, 2x RTX 3080, Mellanox CX5, DM
#   Numa 0 - cores 16-31
#     Sees 2x RTX 2080, Mellanox CX4, Tier0 RAID, Cubix expander: [Tier1 RAID, LSI RAIDS, 1x 1080, 2x 980]

# =========== Setup cpu sets

# check CPUs with: numactl --hardware

declare -A cpusetlist
declare -A cpusetoption
declare -A cpusetpgrep
declare -A cpusetmemlist

SYSTEMCPUS="0-5,16-21,32-99,111-127" # 12
ISOLCPUS="6-15,22-31,100-110" # 20
MAX_MEMS=1

# For inbound RT TCP of the IR camera(s)
NAME="ircam"
cpusetlist[${NAME}]="29"
cpusetoption[${NAME}]="--cpu_exclusive"
cpusetmemlist[${NAME}]="0-${MAX_MEMS}"

# For DM comb
NAME="dmcomb"
cpusetlist[${NAME}]="30"
cpusetoption[${NAME}]="--cpu_exclusive"
cpusetpgrep[${NAME}]="DMcomb-0"
cpusetmemlist[${NAME}]="0-${MAX_MEMS}"

# For DM drive after comb
NAME="dmdrv"
cpusetlist[${NAME}]="31"
cpusetoption[${NAME}]="--cpu_exclusive"
cpusetpgrep[${NAME}]="runBMCcacao"
cpusetmemlist[${NAME}]="0-${MAX_MEMS}"

# For main AO loop
NAME="aol0RT"
cpusetlist[${NAME}]="22-28"
cpusetoption[${NAME}]="--cpu_exclusive"
cpusetpgrep[${NAME}]="aol0run|aol0dmfw|aol0mexw"
cpusetmemlist[${NAME}]="0-${MAX_MEMS}"

# AO loop aux
NAME="aol0RT1"
cpusetlist[${NAME}]="14-15"
cpusetoption[${NAME}]="--cpu_exclusive"
cpusetpgrep[${NAME}]="modeval"
cpusetmemlist[${NAME}]="0-${MAX_MEMS}"

# AO loop aux
NAME="aol0RT2"
cpusetlist[${NAME}]="6-7"
cpusetoption[${NAME}]="--cpu_exclusive"
cpusetmemlist[${NAME}]="0-${MAX_MEMS}"

# OCAM receive
NAME="aol0COM"
cpusetlist[${NAME}]="8"
cpusetoption[${NAME}]="--cpu_exclusive"
cpusetpgrep[${NAME}]="aol0COM"
cpusetmemlist[${NAME}]="0-${MAX_MEMS}"

# RT loggers
NAME="aollog"
cpusetlist[${NAME}]="9-12"
cpusetoption[${NAME}]="--cpu_exclusive"
cpusetpgrep[${NAME}]="logshim|aolrtlog"
cpusetmemlist[${NAME}]="0-${MAX_MEMS}"

# RT loggers
NAME="aol0log"
cpusetlist[${NAME}]="100-110"
cpusetoption[${NAME}]="--cpu_exclusive"
cpusetpgrep[${NAME}]="logshim|aolrtlog"
cpusetmemlist[${NAME}]="0-${MAX_MEMS}"

# RT monitoring
NAME="RTmon"
cpusetlist[${NAME}]="13"
cpusetoption[${NAME}]="--cpu_exclusive"
cpusetmemlist[${NAME}]="0-${MAX_MEMS}"



# =========== Optimize GPU performance


function GPUconfig()
{
sudo nvidia-smi -pm 1

# To querry clocks:
# nvidia-smi -i 0 -q -d SUPPORTED_CLOCKS

# To view current clocks:
# nvidia-smi -i 0 -q -d CLOCK


# GTX980 Ti cards # TODO set all clocks to max speed
#sudo sh -c "sudo nvidia-smi -i 1 -ac 3505,1582"
#sudo sh -c "sudo nvidia-smi -i 2 -ac 3505,1582"
#sudo sh -c "sudo nvidia-smi -i 3 -ac 3505,1582"
#sudo sh -c "sudo nvidia-smi -i 4 -ac 3505,1582"
}



# ====================================================================================
# ====================================================================================
# ====================================================================================


# number of arguments to script
NBARGS=0

# ======================= PROCESS NAME =================================
pname=`echo "$0" | sed "s/\.\///g"`


function printHELP {
echo "------------------------------------------------------------------------"
echo "$(tput bold) $pname :CONFIGURE CPU FOR LOW-LATENCY AO LOOP $(tput sgr0)"
echo "------------------------------------------------------------------------"
echo " Configures LAN, CPU cores, CPU sets, GPU(s)"
echo " To toggle system in high performance mode, use -P option (-PF to turn off)"
echo "   "
echo " $(tput bold)USAGE:$(tput sgr0)"
echo "     $0 [-ho]"
echo ""
echo " $(tput bold)OPTIONS:$(tput sgr0)"
echo "     $(tput bold)-h$(tput sgr0)          help"
echo "     $(tput bold)-T$(tput sgr0)          (T)est mode. Log commands to file instead of executing them"
echo "     $(tput bold)-F$(tput sgr0)          turn O(F)F low-latency configuration (default is ON)"
echo ""
echo "     $(tput bold)-P$(tput sgr0)          CPU (P)erformance"
echo ""
echo "     $(tput bold)-n$(tput sgr0)          (n)etwork"
echo "     $(tput bold)-y$(tput sgr0)          h(y)yperthreading"
echo "     $(tput bold)-l$(tput sgr0)          CPU (l)atency"
echo "     $(tput bold)-I$(tput sgr0)          (I)RQ"
echo "     $(tput bold)-G$(tput sgr0)          (G)PU"
echo "     $(tput bold)-c$(tput sgr0)          (c)puset"
echo ""
echo "------------------------------------------------------------------------"
}


printHELP1 ()
{
    printf "%20s       configure CPU for low-latency AO loop operation\n" "$0"
}


EXITSTATUS=0

function cmdexists()
{
  command -v "$1" >/dev/null 2>&1
}


function checkCommand {
if cmdexists $1; then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] Command $(tput bold)$1$(tput sgr0) found"
else
    echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] Command $(tput bold)$1$(tput sgr0) not installed."
    if [ -z "$1" ];then
    echo "Aborting"
    EXITSTATUS=1
    else
    echo "Installing package $2"
    sudo apt install $2
    if cmdexists $1; then
    echo "Package installed, command found"
    else
    echo "Installation failed - Aborting"
    EXITSTATUS=1
    fi
    fi
fi

}






# Transform long options to short ones
singlelinehelp=0
for arg in "$@"; do
  shift
  case "$arg" in
    "--help") set -- "$@" "-h" ;;
    "--help1")
set -- "$@" "-h"
singlelinehelp=1;
;;
    *)        set -- "$@" "$arg"
  esac
done




ON=1 # default

ALL=1 # default

CPUPERFORMANCEsetup="0"

NETWORKsetup="0"
HYPERTHREADINGsetup="0"
CPULATENCYsetup="0"
IRQsetup="0"
GPUsetup="0"
CPUSETsetup="0"


TESTMODE=0 # default
while getopts :hTFnylIGcP FLAG; do
  case $FLAG in
    h)  #show help
      if [ "$singlelinehelp" -eq "0" ]; then
      printHELP
      else
      printHELP1
      fi
      exit
      ;;
    T) # test mode, do not execute commands
    TESTMODE="1"
    rm systemconfig.test.log
    echo "Commands will not be executed"
    echo "Commands written to systemconfig.test.log"
    ;;
    F)
    echo "TURNING LOW-LATENCY SETTINGS OFF"
	ON="0"
    ;;


    P)
    CPUPERFORMANCEsetup="1"
    ALL="0"
    ;;

    n)
    NETWORKsetup="1"
    ALL="0"
    ;;
    y)
    HYPERTHREADINGsetup="1"
    ALL="0"
    ;;
    l)
    CPULATENCYsetup="1"
    ALL="0"
    ;;
    I)
    IRQsetup="1"
    ALL="0"
    ;;
    G)
    GPUsetup="1"
    ALL="0"
    ;;
    c)
    CPUSETsetup="1"
    ALL="0"
    ;;


    \?) #unrecognized option - show help
      echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
      printHELP
      ;;
  esac
done

shift $((OPTIND-1))






if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
if [ "$#" -ne $NBARGS ]; then
    echo "$(tput setaf 1)$(tput bold) Illegal number of parameters ($NBARGS params required, $# entered) $(tput sgr0)"
fi
printHELP
        exit
fi



checkCommand tmux tmux
checkCommand cset cpuset
checkCommand netstat
checkCommand cc-setlatency
checkCommand cpupower linux-tools-common

if [ $EXITSTATUS -eq 1 ]; then
echo ""
echo "$(tput setaf 1)$(tput bold) REQUIRED FILES, COMMANDS NOT FOUND: EXITING $(tput sgr0)"
echo ""
exit
else
echo ""
fi





function evalcmd()
{
	if [ "$TESTMODE" -eq "1" ]; then
	echo "$1" >> systemconfig.test.log
	else
	eval "$1"
	fi
}




if [ "$ALL" = "1" ]; then
  NETWORKsetup="1"
  HYPERTHREADINGsetup="1"
  CPULATENCYsetup="1"
  IRQsetup="1"
  GPUsetup="1"
  CPUSETsetup="1"
fi




echo "==============================="
echo "CPUPERFORMANCEsetup   = $CPUPERFORMANCEsetup"
echo ""
echo "NETWORKsetup          = $NETWORKsetup"
echo "HYPERTHREADINGsetup   = $HYPERTHREADINGsetup"
echo "CPULATENCYsetup       = $CPULATENCYsetup"
echo "IRQsetup              = $IRQsetup"
echo "GPUsetup              = $GPUsetup"
echo "CPUSETsetup           = $CPUSETsetup"
echo "==============================="

# =================================================================================
# =========== GPU config
# =================================================================================

if [ "$GPUsetup" = "1" ]; then
  if [ "$ON" = "1" ]; then
    GPUconfig
  fi
fi

# =================================================================================
# =========== set CPU SETS
# =================================================================================

if [ "$CPUSETsetup" = "1" ]; then

  if [ "$ON" = "1" ]; then

    # There's a glitch on AMD, so first let's make a "cset shield"
    sudo cset shield -c ${ISOLCPUS}
    # then destroy the shielded set - but some other tweaks happened
    sudo cset set -d user
    # Also enable all memory banks for system
    sudo cset set -m 0-${MAX_MEMS} system

    for c in "${!cpusetlist[@]}"; do
      printf "CPU set %10s cpus: %s\n" "$c" "${cpusetlist[$c]}"
      cmdstring=$( printf "sudo cset set --cpu %s %s -m %s --set %s" "${cpusetlist[$c]}" "${cpusetoption[$c]}" "${cpusetmemlist[$c]}" "$c" )
      evalcmd "$cmdstring"
    done

    # move as much as possible to system
    cmdstring="sudo cset proc -m -k --force --threads -f root -t system"
    evalcmd "$cmdstring"

    cmdstring="sudo cset proc -k -f root -t system"
    evalcmd "$cmdstring"



    for c in "${!cpusetpgrep[@]}"; do
      pidlist=$( pgrep -f ${cpusetpgrep[$c]}|xargs echo | sed 's/ /,/g' )
      cmdstring="sudo cset proc -m -p $pidlist -t $c"
      echo $cmdstring
      evalcmd "$cmdstring"
    done

    # RTmon should be used for RT process monitoring and testing
    # to run a process/job/script within RTmon, use:
    #
    # cset proc -s RTmon -e bash
    #

  else
    echo "Destroying CPU sets"

    for c in "${!cpusetlist[@]}"; do
      printf "destroying CPU set %10s\n" "$c"
        cmdstring=$( printf "sudo cset se -d %s" "$c" )
        evalcmd "$cmdstring"
    done
  fi

  # show CPU sets
  sudo cset set -l

fi


datestr="$( date -u )"
echo "$datestr" > systemconfigOK

exit


##############################
########## NOTES #############
##############################

# Tools

## CHECKING LATENCIES
sudo cyclictest --smp -p98 -m -i 500 -D 3

## watching non-maskable hardware interrupts
watch -d -n 1 grep NMI /proc/interrupts
